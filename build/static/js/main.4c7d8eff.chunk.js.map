{"version":3,"sources":["pages/free-robux.tsx","App.tsx","index.tsx"],"names":["FreeRobux","props","state","doTheThing","a","name","anzahl","count","alreadyran","setState","log","wr","db","Math","floor","random","sleep","handleChange","bind","items","this","t","push","className","text","newLog","event","console","target","value","onChange","type","min","onClick","id","printLog","React","Component","ms","Promise","resolve","setTimeout","App","property","content","meta","title","url","image","description","href","path","component","exact","FakeText","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c7d8eff.chunk.js","sourcesContent":["import React, {Fragment} from \"react\"\r\nimport \"../style/free-robux.css\"\r\n\r\nexport default class FreeRobux extends React.Component{\r\n       \r\n  constructor(props: {}) {\r\n      super(props);\r\n      this.state = {name: \"\", count: 0, log: []}\r\n      this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  \r\n  state: {name: string, count: number, log: string[]}\r\n  \r\n  doTheThing = async () => {\r\n      const name = this.state.name\r\n      const anzahl = this.state.count\r\n      if (alreadyran) {\r\n          this.setState({log: []})\r\n      }\r\n      if (name == \"\" || anzahl == 0) {\r\n          this.wr(\"Username und Anzahl eingeben\")\r\n          return\r\n      }\r\n\r\n      const db = Math.floor((Math.random() * 100) + 1)\r\n\r\n      this.wr(`Willkommen ${name}!`)\r\n      this.wr(\"Verbindung zur Roblox API aufbauen (mit einem speziellen hack)...\"); await sleep(2000)\r\n      this.wr(\"Cracking SHA-256 keys...\"); await sleep(1000)\r\n      this.wr(`Verbundung zur US_East#${db} Datenbank aufbauen (no-logging mode)...`); await sleep(1000)\r\n      this.wr(`Datenbank ausführung: UPDATE accounts SET Robux = '${anzahl}' WHERE username == '${name}'`); await sleep(500)\r\n      this.wr(\"Änderungen übernehmen...\"); await sleep(1000)\r\n      this.wr(`Verbindung zur US_East#${db} Datenbank abbrechen (no-logging mode)...`); await sleep(200)\r\n      this.wr(\"Herzlichen Glückwunsch!, in Rund 24 stunden werden die Robux auf deinem account im spiel auftauchen.\")\r\n      alreadyran = true\r\n  }\r\n  \r\n  printLog() {\r\n    const items = []\r\n    \r\n    for(const t of this.state.log) {\r\n      items.push(<Fragment><div className=\"green\">{t}</div><br/></Fragment>)\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        {items}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  wr(text: string) {\r\n    const newLog = this.state.log\r\n    newLog.push(text)\r\n    this.setState({log: newLog})\r\n  }\r\n\r\n  handleChange(event: any) {   \r\n      console.log(event.target)\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h1>Welcome to <span className=\"rainbow\">FREE ROBUX GENERATOR</span></h1>\r\n        <label>\r\n            Name:\r\n            <input value={this.state.name} onChange={(event) => this.setState({name: event.target.value})} type=\"text\"/>\r\n        </label>\r\n        <label>\r\n            Robux Anzahl:\r\n            <input value={this.state.count} onChange={(event) => this.setState({count: event.target.value})} min=\"0\" type=\"number\"/>\r\n        </label>\r\n        <button onClick={this.doTheThing}>Run!</button>\r\n        <hr/>\r\n        <div id=\"log\">{this.printLog()}</div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nlet alreadyran = false\r\n\r\nfunction sleep(ms: number) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\n\r\n\r\n","import React, { Fragment } from \"react\";\nimport \"./index.css\"\nimport FreeRobux from \"./pages/free-robux\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <main>\n        <meta property=\"og:title\" content={meta.title}/>\n        <meta property=\"og:type\" content={meta.type}/>\n        <meta property=\"og:url\" content={meta.url}/>\n        <meta name='theme-color' content={meta[\"theme-color\"]}/>\n        <meta property=\"og:image\" content={meta.image}/>\n        <meta property=\"og:description\" content={meta.description}/>\n        <nav>\n          <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/free-robux\">Robux Generator</a></li>\n          </ul>\n        </nav>\n\n        <Route path=\"/free-robux\" component={FreeRobux} />\n        <Route exact path=\"/\" component={FakeText} />\n        \n      </main>\n    </Router>\n  );\n}\n\nconst meta = {\n  title: \"JMP's Weird Stuff\",\n  type: \"website\",\n  url: \"https://weird.jmp.blue\",\n  \"theme-color\": \"#ff00ff\",\n  image: \"https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fwww.catster.com%2Fwp-content%2Fuploads%2F2018%2F04%2FAngry-cat-sound-and-body-language.jpg&f=1&nofb=1\",\n  description: \"JMP's Weird Random Projects\"\n}\n\nconst FakeText = () => (\n  <p>No You</p>\n)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}